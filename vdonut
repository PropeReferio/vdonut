#!/usr/bin/env python
import argparse
import configparser
import datetime
import os
import smtplib
import ssl

import requests

from constants import locations, diets


def get_html(location):
    """
    Makes a request that gets a JSON as a response.
    :param location: (str) url for the store location passed to args.location.
    :return: ([] str) Returns lists of product names, prices, and availabilities.
    """
    try:
        r = requests.get(locations[location])
    except KeyError:
        print(f"\n\nlocation \"{location}\" is not a valid option. \n\nValid \
inputs for -l --location: \nfranklin\neast_nashville\nwest_nashville\n\
hillsboro\nponce_city_market\nwestside_provisions")
    except Exception as e:
        print(e)
    else:
        # To ensure that the page is loaded
        data = r.json()['data']
        names, high_prices, low_prices, availabilities = [], [], [], []
        for i in data:
            names.append(i['name'])
            high_prices.append(i['price']['high_formatted'])
            low_prices.append(i['price']['low_formatted'])
            stock = i['badges']
            if stock['low_stock']:
                availabilities.append('Low Stock')
            elif stock['out_of_stock']:
                availabilities.append('Out of Stock')
            else:
                availabilities.append('')
        if low_prices != high_prices:
            print("Low and high prices data are not the same!!!")
        return names, availabilities, high_prices


def get_output(names, availabilities, prices, diet, location_string):
    """
	Generates the formatted text that the user sees.
	:param names: ([] str) List of product names from the json.
	:param availabilities: ([] str) List of availabilities (Low Stock, Out of Stock) from the json.
	:param prices: ([] str) List of prices from the json.
	:param diet: (str) The diet passed to args.diet.
	:param location_string: (str) The location passed to args.diet, in title-case.
	:return: The formatted text.
	"""
    output = f"\nShowing {diet} options at the {location_string} location: \n"
    output += str(datetime.datetime.now().strftime("%d %B %Y, %H:%M")) + '\n\n'
    for i in range(len(names)):
        if all([diets[diet] in names[i], not 'Tee' in names[i],
                not 'Hoodie' in names[i], not 'Onesie' in names[i],
                not 'Hat' in names[i]]):
            if availabilities[i]:
                output += f"{prices[i].strip() : <6} |  {names[i].strip() : <48}  |  {availabilities[i].strip()} \n"
            else:
                output += f"{prices[i].strip() : <6} |  {names[i].strip() : <48} \n"

    return output


def write_config():
    """
	When 'vdonut config' is called, this function writes the config.ini file.
	:return: None
	"""
    default_location = ''
    while default_location not in list(locations.keys()):
        print(
            '\nChoose your preferred location: \n\nfranklin\nwest_nashville\neast_nashville\nhillsboro\nponce_city_market\nwestside_provisions\n')
        default_location = input('Location: ')
    default_diet = ''
    while default_diet not in list(diets.keys()):
        print('\nChoose your preferred diet: \n\nomni\nvegan\npaleo\n')
        default_diet = input('Diet: ')

    new_config = configparser.ConfigParser()
    new_config['DEFAULTS'] = {
        'location': default_location,
        'diet': default_diet
    }

    with open('config.ini', 'w') as configfile:
        new_config.write(configfile)
    print(f"\nDefault location set: {default_location}\nDefault diet set: {default_diet}")

def send_email(subject, body, receiver):
    sender_email = os.getenv('VDONUT_EMAIL_SENDER')
    message = f"""\
    Subject: {subject}

    {body}"""

    port = 465
    # For SSL
    password = os.getenv('VDONUT_EMAIL_SENDER_PASSWORD')

    # Create a secure SSL context
    context = ssl.create_default_context()

    with smtplib.SMTP_SSL("smtp.gmail.com", port, context=context) as server:
        server.login(sender_email, password)
        server.sendmail(sender_email, receiver, message)


def Main():
    """
	Takes arguments with argparse and generates formatted text detailing the availabilities
	and prices of donuts at any of 6 Five Daughters Bakery locations.
	:return:
	"""
    script_path = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(script_path, 'config.ini')
    c_parser = configparser.ConfigParser()
    if os.path.isfile(config_path):
        c_parser.read(config_path)
        location = c_parser['DEFAULTS']['location']
        diet = c_parser['DEFAULTS']['diet']
        location_default = location if location else None
        diet_default = diet if diet else None
    else:
        location_default, diet_default = None, None

    parser = argparse.ArgumentParser(description="A CLI that gets diet-specific (or not) inventories from \
												 any of the excellent Five Daughters Bakery locations.")
    parser.add_argument("-f",
                        "--file",
                        help="Filename to write output to.",
                        type=str)
    parser.add_argument('-d', '--diet',
                        help="Dietary preferences. Use 'omni' if you have no preference. 'vegan' and 'paleo' are also valid options.",
                        type=str,
                        default=diet_default)
    parser.add_argument("-l",
                        "--location",
                        help="The store location to get inventory from. Valid Choices: franklin, east_nashville, \
		west_nashville, hillsboro, ponce_city_market, westside_provisions",
                        type=str,
                        default=location_default)
    parser.add_argument("-e",
                        "--email",
                        help="Email address to send results to.",
                        type=str)

    subparser = parser.add_subparsers(
        dest='command',
        title='config',
        description="Running 'vdonut config' will set default arguments for location and diet."
    )
    config_subparser = subparser.add_parser('config')

    args = parser.parse_args()

    if args.diet not in diets.keys():
        raise Exception(f"'{args.diet}' is not a valid option for diet. Run 'vdonut --help' to see valid options. You can set default values for location and diet by running \
		'vdonut config'.")
    if args.location not in locations.keys():
        raise Exception(f"'{args.location}' is not a valid option for location. Run 'vdonut --help' to see valid options. You can set default values for location and diet by running \
		'vdonut config'.")

    if args.command == 'config':
        write_config()
        return

    names, availabilities, prices = get_html(args.location)

    location_string = ' '.join(args.location.split('_')).title()

    output = get_output(names, availabilities, prices, args.diet, location_string)
    print(output)

    if args.file:
        with open(args.file, "a") as f:
            f.write(output)

    if args.email:
        send_email(f"{diets[args.diet]} donuts at the Five Daughters Bakery in {args.location}", output, args.email)


if __name__ == "__main__":
    Main()
